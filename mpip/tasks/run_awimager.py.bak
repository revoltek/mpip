""" Module run_awimager

Define task run_awimager
"""
from ..task import Task
from .. import mylogger

class Run_awimager(Task):

   __name__ = 'run_awimager'
   __doc__ = 'doc for run_awimager'
   banner = 'RUN_AWIMAGER: run many istances of awimager'
   arg_list = ['sb','obsdir','node','msname','image','wprojplanes','weight','robust','npix','cellsize','datacol','niter','stokes','cyclefactor','gain','applyelement','timewindow','operation']

   def __init__(self, session):
	Task.__init__(self, session, self.__name__)
	#self.mylog = mylogger.logging.getLogger('mpip.run_awimager')

   def run(self):
      if self.session._cluster_status == None:
         self.mylog.error("Not connected to a cluster.")
         return False
      wdir = self.session.opts.obsdir+'/'+self.session._obs_name+'/SB$SB/'
      datafile = self.session.opts.msname
      image = self.session.opts.image
      wprojplanes = self.session.opts.wprojplanes
      weight = self.session.opts.weight
      robust = self.session.opts.robust
      npix = self.session.opts.npix
      cellsize = self.session.opts.cellsize
      datacol = self.session.opts.datacol
      niter = self.session.opts.niter
      stokes = self.session.opts.stokes
      cyclefactor = self.session.opts.cyclefactor
      gain = self.session.opts.gain
      applyelement = self.session.opts.applyelement
      timewindow = self.session.opts.timewindow
      operation = self.session.opts.operation
      command = 'awimger ms=' + datafile + ' image=' + image + ' wprojplanes=' + wprojplanes +\
	 ' weight=' + weight + ' robust=' + robust + ' npix=' + npix + \
	 ' cellsize=' + cellsize + ' datacol=' + datacol + ' niter=' + niter + \
	 ' stokes=' + stokes + ' cyclefactor=' + cyclefactor + ' gain=' + gain +\
	 ' applyelement=' + applyelement + ' timewindow=' + timewindow + \
	 ' operation=' + operation
      return self.session.run_dist_com_all('run_awimager', wdir, command, \
	    self.session.opts.sb, self.session.opts.node)








